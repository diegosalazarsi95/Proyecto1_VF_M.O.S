#ifndef __DO_RMAHDR_
#define __DO_RMAHDR_

#ifdef __cplusplus
  extern "C" {
#endif

#define VCS_RTLIB_TLS_MODEL  __attribute__((tls_model("initial-exec")))

typedef unsigned long UP;
typedef unsigned U;
typedef unsigned char UB;
typedef unsigned char scalar;
typedef struct vec32 vec32;
typedef unsigned short US;
typedef unsigned char SVAL;
typedef unsigned char TYPEB;
typedef struct qird QIRD;
typedef unsigned char UST_e;
typedef unsigned uscope_t;
typedef U  NumLibs_t;
struct vec32 {
    U  I1;
    U  I2;
};
typedef unsigned long RP;
typedef unsigned long RO;
typedef unsigned long long ULL;
typedef U  GateCount;
typedef U  NodeCount;
typedef unsigned short HsimEdge;
typedef unsigned char HsimExprChar;
typedef struct {
    U  I691;
    RP  I692;
} RmaReceiveClock1;
typedef NodeCount  FlatNodeNum;
typedef U  InstNum;
typedef unsigned long long TimeStamp64;
typedef unsigned long long TimeStamp;
typedef enum {
    PD_SING = 0,
    PD_RF = 1,
    PD_PLSE = 2,
    PD_PLSE_RF = 3,
    PD_NULL = 4
} PD_e;
typedef TimeStamp  RmaTimeStamp;
typedef TimeStamp64  RmaTimeStamp64;
typedef union {
    double I699;
    unsigned long long I700;
    unsigned  I701[2];
} rma_clock_struct;
typedef struct eblk EBLK;
typedef int (* E_fn)(void);
typedef struct eblk {
    struct eblk * I708;
    E_fn  I709;
    struct iptmpl * I710;
    unsigned I712;
    unsigned I713;
    struct eblk * I714;
} eblk_struct;
typedef struct {
    RP  I708;
    RP  I709;
    RP  I710;
    unsigned I712;
    unsigned I713;
    RP  I714;
} RmaEblk;
typedef struct {
    RP  I708;
    RP  I709;
    RP  I710;
    unsigned I712;
    unsigned I713;
    RP  I714;
    unsigned val;
} RmaEblklq;
typedef union {
    double I699;
    unsigned long long I700;
    unsigned  I701[2];
} clock_struct;
typedef clock_struct  RmaClockStruct;
typedef struct RmaRetain_t RmaRetain;
struct RmaRetain_t {
    RP  I749;
    RmaEblk  I707;
    U  I751;
    US  I752 :1;
    US  I753 :4;
    US  I187 :2;
    US  state :2;
    US  I755 :1;
    US  I756 :2;
    US  I757 :2;
    US  fHsim :1;
    US  I564 :1;
    scalar  newval;
    scalar  I760;
    RP  I761;
};
struct retain_t {
    struct retain_t * I749;
    EBLK  I707;
    U  I751;
    US  I752 :1;
    US  I753 :4;
    US  I187 :2;
    US  state :2;
    US  I755 :1;
    US  I756 :2;
    US  I757 :2;
    US  fHsim :1;
    US  I758 :1;
    scalar  newval;
    scalar  I760;
    void * I761;
};
typedef struct MPSched MPS;
typedef struct RmaMPSched RmaMps;
struct MPSched {
    MPS  * I740;
    scalar  I741;
    scalar  I742;
    scalar  I743;
    scalar  fHsim :1;
    scalar  I187 :6;
    U  I745;
    EBLK  I746;
    void * I747;
    UP   I748[1];
};
struct RmaMPSched {
    RP  I740;
    scalar  I741;
    scalar  I742;
    scalar  I743;
    scalar  fHsim :1;
    scalar  I187 :6;
    U  I745;
    RmaEblk  I746;
    RP  I747;
    RP   I748[1];
};
typedef struct RmaMPSchedPulse RmaMpsp;
struct RmaMPSchedPulse {
    RP  I740;
    scalar  I741;
    scalar  I742;
    scalar  I743;
    scalar  I187;
    U  I745;
    RmaEblk  I746;
    scalar  I757;
    scalar  I766;
    scalar  I767;
    scalar  I768;
    U  I769;
    RmaClockStruct  I770;
    RmaClockStruct  I771;
    U  state;
    U  I772;
    RP  I710;
    RP  I773;
    RP  I774;
    RP   I748[1];
};
typedef struct MPItem MPI;
struct MPItem {
    U  * I776;
    void * I777;
};
typedef struct {
    RmaEblk  I707;
    RP  I778;
    scalar  I779;
    scalar  I757;
    scalar  I780;
} RmaTransEventHdr;
typedef struct RmaMPSchedPulseNewCsdf RmaMpspNewCsdf;
struct RmaMPSchedPulseNewCsdf {
    RP  I740;
    scalar  I741;
    scalar  I742;
    scalar  I743;
    scalar  fHsim :1;
    scalar  I187 :6;
    U  I745;
    RmaEblk  I746;
    scalar  I757;
    scalar  I766;
    scalar  I767;
    scalar  I768;
    U  state :4;
    U  I782 :28;
    RmaClockStruct  I770;
    RmaClockStruct  I771;
    RP  I783;
    RP  I710;
    RP  I784;
    RP   I748[1];
};
typedef struct red_t {
    U  I785;
    U  I786;
    U  I670;
} RED;
typedef struct predd {
    PD_e  I187;
    RED   I787[0];
} PREDD;
union rhs_value {
    vec32  I788;
    scalar  I779;
    vec32  * I757;
    double I789;
    U  I790;
};
typedef struct nbs_t {
    struct nbs_t * I791;
    struct nbs_t * I793;
    void (* I794)(struct nbs_t * I761);
    U  I795 :1;
    U  I796 :1;
    U  I797 :1;
    U  I798 :1;
    U  I799 :1;
    U  I800 :1;
    U  I801 :26;
    U  I802;
    void * I803;
    union rhs_value I804;
    vec32  I699;
    union {
        struct nbs_t * first;
        struct nbs_t * last;
    } I806;
} NBS;
typedef struct {
    int * I807;
    long long I808;
} TypeData;
struct etype {
    U  I580 :8;
    U  I581 :24;
    U  I582;
    U  I583 :1;
    U  I584 :1;
    U  I585 :1;
    U  I586 :1;
    U  I587 :1;
    U  I588 :1;
    U  I589 :1;
    U  I590 :1;
    U  I591 :1;
    U  I592 :4;
    U  I593 :1;
    U  I594 :1;
    U  I595 :1;
    U  I596 :1;
    U  I597 :1;
    U  I598 :1;
    U  I599 :1;
    U  I600 :1;
    U  I601 :2;
    U  I602 :1;
    U  I603 :2;
    U  I604 :1;
    U  I605 :1;
    U  I606 :1;
    U  I607 :1;
    U  I367 :2;
    U  I608;
    TypeData  * I609;
    U  I610;
    U  I611;
    U  I612 :1;
    U  I613 :1;
    U  I614 :1;
    U  I615 :1;
    U  I616 :2;
    U  I617 :2;
    U  I618 :1;
    U  I619 :1;
    U  I620 :1;
    U  I621 :1;
    U  I622 :1;
    U  I623 :1;
    U  I624 :1;
    U  I625 :1;
    U  I626 :1;
    U  I627 :15;
};
typedef struct {
    RP  I809;
    RP  I773;
    RP  I710;
    RP  I774;
    RmaEblk  I707;
    RmaEblk  I810;
    RP  I811;
    scalar  I779;
    scalar  I757;
    char state;
    uscope_t  I812;
    U  I813;
    RP  I814;
    scalar  I766;
    scalar  I767;
    scalar  I768;
    RmaClockStruct  I770;
    RmaClockStruct  I771;
    RP  I747;
} RmaPulse;
typedef enum {
    QIRDModuleC = 1,
    QIRDSVPackageC = 2,
    QIRDSpiceModuleC = 3
} QIRDModuleType;
typedef struct {
    U  I818 :1;
    U  I819 :1;
    U  I820 :1;
    U  I821 :1;
    U  I822 :1;
    U  I823 :1;
    U  I824 :1;
    U  I825 :1;
    U  I826 :1;
    U  I827 :1;
    U  I828 :1;
    U  I829 :1;
    U  I830 :1;
    U  I831 :1;
    U  I832 :1;
    U  I833 :1;
    U  I834 :1;
    U  I835 :1;
    QIRDModuleType  I836 :2;
    U  I837 :1;
    U  I838 :1;
    U  I839 :1;
    U  I840 :1;
    U  I841 :1;
    U  I842 :1;
    U  I843 :1;
    U  I844 :1;
    U  I845 :1;
    U  I846 :1;
    U  I847 :1;
    U  I848 :1;
    U  I849 :1;
    U  I850 :1;
    U  I851 :1;
    U  I852 :1;
    U  I853 :1;
} BitFlags;
struct qird {
    US  I4;
    US  I5;
    U  I6;
    U  I7;
    char * I8;
    char * I9;
    U  * I10;
    char * I11;
    char * I12;
    U  I13;
    U  I14;
    struct vcd_rt * I15;
    U  I17;
    struct _vcdOffset_rt * I18;
    UP  * I20;
    U  I21;
    UP  * I22;
    U  I23;
    U  I24;
    U  I25;
    U  * I26;
    U  * I27;
    void * I28;
    void * I29;
    U  I30;
    int I31;
    UP  I32;
    U  I33;
    U  I34;
    U  I35;
    UP  I36;
    U  * I37;
    UP  I38;
    U  I39;
    BitFlags  I40;
    U  I41;
    U  I42;
    U  I43;
    U  I44;
    U  I45;
    U  * I46;
    U  I47;
    U  * I48;
    U  I49;
    U  I50;
    U  I51;
    U  I52;
    U  I53;
    U  I54;
    U  I55;
    U  * I56;
    U  * I57;
    U  I58;
    U  I59;
    U  * I60;
    U  I61;
    U  * I62;
    U  I63;
    U  I64;
    U  I65;
    U  I66;
    U  * I67;
    U  I68;
    U  * I69;
    U  I70;
    U  I71;
    U  I72;
    U  I73;
    U  I74;
    U  I75;
    U  * I76;
    char * I77;
    U  I78;
    U  I79;
    U  I80;
    U  I81;
    U  I82;
    U  * I83;
    U  I84;
    U  I85;
    UP  * I86;
    U  I87;
    U  I88;
    UP  * I89;
    U  I90;
    U  I91;
    U  I92;
    U  I93;
    U  I94;
    U  I95;
    U  * I96;
    U  I97;
    U  I98;
    U  * I99;
    U  * I100;
    U  * I101;
    U  * I102;
    U  * I103;
    U  I104;
    U  I105;
    struct taskInfo * I106;
    U  I108;
    U  I109;
    U  I110;
    int * I111;
    U  * I112;
    UP  * I113;
    U  * I114;
    U  I115;
    U  I116;
    U  I117;
    U  I118;
    U  I119;
    struct qrefer * I120;
    U  * I122;
    unsigned * I123;
    void * I124;
    U  I125;
    U  I126;
    struct classStaticReferData * I127;
    U  I129;
    U  * I130;
    U  I131;
    U  * I132;
    U  I133;
    struct wakeupInfoStruct * I134;
    U  I136;
    U  I137;
    U  I138;
    U  * I139;
    U  I140;
    U  * I141;
    U  I142;
    U  I143;
    U  I144;
    U  * I145;
    U  I146;
    U  * I147;
    U  I148;
    U  I149;
    U  * I150;
    U  I151;
    U  I152;
    U  * I153;
    U  * I154;
    U  * I155;
    U  I156;
    U  I157;
    U  I158;
    U  I159;
    U  I160;
    struct qrefee * I161;
    U  * I163;
    U  I164;
    struct qdefrefee * I165;
    U  * I167;
    int (* I168)(void);
    char * I169;
    U  I170;
    U  I171;
    void * I172;
    void * I173;
    NumLibs_t  I174;
    char * I175;
    U  * I176;
    U  I177;
    U  I178;
    U  I179;
    U  I180;
    U  I181;
    U  * I182;
    U  * I183;
    int I184;
    struct clock_load * I185;
    int I200;
    struct clock_data * I201;
    int I217;
    struct clock_hiconn * I218;
    U  I222;
    U  I223;
    U  I224;
    U  I225;
    U  * I226;
    U  * I227;
    U  I228;
    void * I229;
    U  I230;
    U  I231;
    UP  * I232;
    void * I233;
    U  I234;
    UP  * I235;
    U  * I236;
    int (* I237)(void);
    U  * I238;
    UP  * I239;
    U  * I240;
    U  I241 :1;
    U  I242 :31;
    U  I243;
    U  I244;
    UP  * I245;
    U  * I246;
    U  I247 :1;
    U  I248 :1;
    U  I249 :1;
    U  I250 :1;
    U  I251 :28;
    U  I252;
    U  I253;
    U  I254;
    U  I255 :31;
    U  I256 :1;
    UP  * I257;
    UP  * I258;
    U  * I259;
    U  * I260;
    U  * I261;
    UP  * I262;
    UP  * I263;
    UP  * I264;
    U  * I265;
    UP  * I266;
    UP  * I267;
    UP  * I268;
    UP  * I269;
    char * I270;
    U  I271;
    U  I272;
    U  I273;
    UP  * I274;
    UP  * I275;
    UP  * I276;
    UP  * I277;
    UP  * I278;
    UP  * I279;
    UP  * I280;
    UP  * I281;
    UP  * I282;
    UP  * I283;
    UP  * I284;
    UP  * I285;
    UP  * I286;
    U  * I287;
    U  * I288;
    UP  * I289;
    U  I290;
    U  I291;
    U  I292;
    U  I293;
    U  I294;
    U  I295;
    U  I296;
    U  I297;
    char * I298;
    U  * I299;
    U  I300;
    U  I301;
    U  I302;
    U  I303;
    U  I304;
    UP  * I305;
    UP  * I306;
    UP  * I307;
    UP  * I308;
    struct daidirInfo * I309;
    struct vcs_tftable * I311;
    U  I313;
    UP  * I314;
    UP  * I315;
    U  I316;
    U  I317;
    U  I318;
    UP  * I319;
    U  * I320;
    struct qird_hil_data * I321;
    UP  (* I323)(void);
    UP  (* I324)(void);
    UP  (* I325)(void);
    UP  (* I326)(void);
    UP  (* I327)(void);
    int * I328;
    int (* I329)(void);
    char * I330;
    UP  * I331;
    UP  * I332;
    UP  (* I333)(void);
    int (* I334)(void);
    int * I335;
    int (* I336)(void);
    int * I337;
    char * I338;
    U  * I339;
    U  * I340;
    U  * I341;
    U  * I342;
    void * I343;
    U  I344;
    void * I345;
    U  I346;
    U  I347;
    U  I348;
    U  I349;
    U  I350;
    U  I351;
    UP  * I352;
    U  * I353;
    U  * I354;
    U  I355 :15;
    U  I356 :14;
    U  I357 :1;
    U  I358 :1;
    U  I359 :1;
    U  I360 :3;
    U  I361 :1;
    U  I362 :1;
    U  I363 :17;
    U  I364 :3;
    U  I365 :5;
    U  I366 :1;
    U  I367 :1;
    U  I368 :1;
    U  I369 :31;
    struct scope * I370;
    U  I372;
    U  I373;
    U  I374;
    U  * I375;
    U  * I376;
    U  * I377;
    U  I378;
    U  I379;
    U  I380;
    struct pcbt * I381;
    U  I391;
    U  I392;
    U  I393;
    U  I394;
    void * I395;
    void * I396;
    void * I397;
    int I398;
    U  * I399;
    U  I400;
    U  I401;
    U  I402;
    U  I403;
    U  I404;
    U  I405;
    U  I406;
    void * I407;
    UP  * I408;
    U  I409;
    U  I410;
    void * I411;
    U  I412;
    void * I413;
    U  I414;
    void * I415;
    U  I416;
    int (* I417)(void);
    int (* I418)(void);
    void * I419;
    void * I420;
    void * I421;
    U  I422;
    U  I423;
    U  I424;
    U  I425;
    U  I426;
    U  I427;
    char * I428;
    U  I429;
    U  * I430;
    U  I431;
    U  * I432;
    U  I433;
    U  I434;
    U  I435;
    U  I436;
    U  I437;
    U  I438;
    U  * I439;
    U  I440;
    U  I441;
    U  * I442;
    U  I443;
    U  I444;
    U  * I445;
    char * I446;
    U  I447;
    U  I448;
    U  I449;
    U  I450;
    U  * I451;
    U  * I452;
    U  I453;
    U  * I454;
    U  * I455;
    U  I456;
    U  I457;
    U  I458;
    UP  * I459;
    U  I460;
    U  I461;
    U  I462;
    struct cosim_info * I463;
    U  I465;
    U  * I466;
    U  I467;
    void * I468;
    U  I469;
    U  * I470;
    U  I471;
    U  * I472;
    U  I473;
    U  I474;
    U  * I475;
    U  I476;
    U  * I477;
    U  I478;
    U  * I479;
    U  I480;
    U  I481;
    U  I482;
    U  I483;
    U  I484;
    U  I485;
    U  I486;
    U  I487;
    U  I488;
    U  * I489;
    U  * I490;
    void (* I491)(void);
    U  * I492;
    UP  * I493;
    struct mhdl_outInfo * I494;
    UP  * I496;
    U  I497;
    UP  * I498;
    U  I499;
    void * I500;
    U  * I501;
    void * I502;
    char * I503;
    int (* I504)(void);
    U  * I505;
    char * I506;
    char * I507;
    U  I508;
    U  * I509;
    char * I510;
    U  I511;
    struct regInitInfo * I512;
    UP  * I514;
    U  * I515;
    char * I516;
    U  I517;
    U  I518;
    U  I519;
    U  I520;
    U  I521;
    U  I522;
    U  I523;
    U  I524;
    UP  * I525;
    U  I526;
    U  I527;
    U  I528;
    U  I529;
    UP  * I530;
    U  I531;
    UP  * I532;
    U  I533;
    U  I534;
    U  I535;
    U  * I536;
    U  I537;
    U  I538;
    U  I539;
    U  * I540;
    U  * I541;
    UP  * I542;
    UP  * I543;
    void * I544;
    UP  I545;
    void * I546;
    void * I547;
    void * I548;
    void * I549;
    void * I550;
    UP  I551;
    U  * I552;
    U  * I553;
    void * I554;
    U  I555 :1;
    U  I556 :31;
    U  I557;
    U  I558;
    U  I559;
    int I560;
    U  I561 :1;
    U  I562 :1;
    U  I563 :1;
    U  I564 :29;
    void * I565;
    void * I566;
    void * I567;
    void * I568;
    UP  * I569;
    U  * I570;
    U  I571;
    char * I572;
    U  * I573;
    U  * I574;
    char * I575;
    int * I576;
    UP  * I577;
    struct etype * I578;
    U  I628;
    U  I629;
    U  I630;
    U  * I631;
    void * I632;
    U  I633;
    U  I634;
    void * I635;
    U  I636;
    U  I637;
    U  * I638;
    U  * I639;
    char * I640;
    U  I641;
    U  I642;
    U  * I643;
    U  I644;
    U  * I645;
    U  I646;
    U  I647;
    U  * I648;
};
typedef struct pcbt {
    U  * I383;
    UP  I384;
    U  I385;
    U  I386;
    U  I387;
    U  I388;
    U  I389;
    U  I390;
} PCBT;
struct iptmpl {
    QIRD  * I715;
    struct vcs_globals_t * I716;
    void * I718;
    UP  I719;
    UP  I720;
    struct iptmpl * I710[2];
};
typedef unsigned long long FileOffset;
typedef struct _hsimPeriodL {
    char  I907[256];
    struct _hsimPeriodL * I859;
} HsimPeriodL;
typedef struct {
    U   I909[2];
    U  I910 :1;
    U  I911 :1;
    U  I912 :8;
    U  I913 :8;
    U  I914 :8;
    U  I915 :4;
    unsigned long long I916;
    unsigned long long I917;
    unsigned long long I918;
    unsigned long long I919;
    unsigned long long I920;
    U  I921;
    U  I922;
    U  I923;
    U  I924;
    HsimPeriodL  * I925;
    HsimPeriodL  * I926;
    U  I927;
} HsimSignalMonitor;
typedef struct {
    FlatNodeNum  I928;
    InstNum  I929;
    U  I867;
    scalar  I930;
    UB  I931;
    UB  I932;
    UB  I933;
    UB  I934;
    U  I935;
    U  I936;
    U  I937;
    U  I938;
    U  I939;
    U  I940;
    U  I941;
    U  I942;
    HsimSignalMonitor  * I943;
    RP  I944;
    RmaTimeStamp64  I945;
    U  I946;
    RmaTimeStamp64  I947;
    U  I948;
} HsimNodeRecord;
typedef struct {
    RP  I949;
    RP  I710;
} RmaIbfIp;
typedef struct {
    RP  I949;
    RP  pcode;
} RmaIbfPcode;
typedef struct {
    RmaEblk  I707;
} RmaEvTriggeredOrSyncLoadCg;
typedef struct {
    RO  I856;
    RP  pcode;
} SchedGateFanout;
typedef struct {
    RO  I856;
    RP  pcode;
    U   I888[4];
} SchedSelectGateFanout;
typedef struct {
    RP  pcode;
    RmaEblklq  I707;
} SchedGateEblk;
typedef struct {
    RP  pcode;
    RmaEblklq  I707;
    UB  * I950;
} SchedSelectGateEblk;
typedef struct {
    RmaEblk  I707;
    RP  I951;
} RmaAnySchedSampleSCg;
typedef struct {
    RmaEblk  I707;
    RP  I950;
    RP  I951;
    vec32  I952;
} RmaAnySchedVCg;
typedef struct {
    RmaEblk  I707;
    RP  I950;
    RP  I951;
    vec32   I756[1];
} RmaAnySchedWCg;
typedef struct {
    RmaEblk  I707;
    RP  I950;
    RP  I951;
    scalar   I953[1];
} RmaAnySchedECg;
typedef struct {
    U  I954;
    U  I695;
    U  I867;
    U  I955;
    RmaIbfIp  * I956;
    EBLK  I707;
    void * val;
} RmaThreadSchedCompiledLoads;
typedef struct {
    U  I695;
    U  I703;
    RmaThreadSchedCompiledLoads  * I957;
} RmaSchedCompileLoadsCg;
typedef struct {
    RP  I958;
} RmaRootCbkCg;
typedef struct {
    RP  I959;
} RmaRootVcdCg;
typedef struct {
    RP  I960;
} RmaRootForceCbkCg;
typedef struct {
    RmaEblk  I707;
    RP  I961;
} RmaForceCbkJmpCg;
typedef struct {
    U  I5;
    U  I703 :30;
    U  I962 :1;
    U  I963 :1;
    vec32  I788;
    U  I964;
    RP  I965;
    RP  I966;
} RmaForceSelectorV;
typedef struct {
    U  I5;
    RmaIbfPcode  I972;
} RmaNetTypeDriverGate;
typedef struct {
    U  I5;
    U  I653;
    RmaIbfPcode   I972[1];
} RmaNetTypeScatterGate;
typedef struct {
    U  I5;
    RmaIbfPcode  I972;
} RmaNetTypeGatherGate;
typedef struct {
    RmaIbfPcode  I973;
    U  I974 :3;
    U  I975 :1;
    U  I976 :1;
    U  I977 :16;
} RmaNbaGateOfn;
typedef struct {
    U  I5;
    NBS  I978;
    RmaIbfPcode  I973;
} RmaNbaGate1;
typedef struct {
    RP  ptable;
    RP  pfn;
    RP  pcode;
} Rma1InputGateFaninCgS;
typedef struct RmaSeqPrimOutputS_ RmaSeqPrimOutputOnClkS;
struct RmaSeqPrimOutputS_ {
    RP  pfn;
    RP  I981;
    U  state;
    U  I982;
    RP  I983;
    U  I691;
    scalar  val;
};
typedef struct {
    U  I5;
    U  iinput;
    UB  I985;
    RP  I986;
} RmaCondOptLoad;
typedef struct {
    U  I5;
    U  iinput;
    UB  I985;
    RP  I986;
} RmaMacroStateUpdate;
typedef struct {
    U  I5;
    U  state;
    U  I987;
    UB  I985;
    U  * I988;
} RmaMacroState;
typedef struct {
    U  iinput;
    RP  I989;
} RmaMultiInputLogicGateCg;
typedef struct {
    U  iinput;
    RP  ptable;
    RP  I989;
} RmaSeqPrimEdgeInputCg;
typedef struct {
    RmaEblk  I707;
    RP  pcode;
} RmaSched0GateCg;
typedef struct {
    RmaEblk  I707;
    RP  pcode;
    RP  pfn;
} RmaUdpDeltaGateCg;
typedef struct {
    RmaEblk  I707;
    RP  pcode;
    RP  pfn;
    scalar  I990;
} RmaSchedDeltaGateCg;
typedef struct {
    UB  I991;
    RP  I992;
    RP  I993;
} RmaPropNodeSeqLhsSCg;
typedef struct {
    RmaEblk  I707;
    RP  pcode;
    U  I867;
    U   I696[1];
} RmaBitEdgeEblk;
typedef struct {
    U  I5;
    RP  I787;
    RmaEblk  I707;
    RmaIbfPcode  I973;
} RmaGateDelay;
typedef struct {
    U  I5;
    RP  I787;
    RmaEblk  I707;
    RmaIbfPcode  I973;
} RmaGateBehavioralDelay;
typedef struct {
    U  I5;
    union {
        RP  I1200;
        RP  I1481;
        RP  I1495;
    } I761;
    RmaIbfPcode  I973;
} RmaMPDelay;
typedef struct {
    U  I5;
    RmaPulse  I994;
    RmaIbfPcode  I973;
} RmaMPPulseHybridDelay;
typedef struct {
    U  I5;
    RmaIbfPcode  I973;
    RmaMps  I995;
} RmaMPHybridDelay;
typedef struct {
    U  I5;
    U  I996;
    RmaIbfPcode  I973;
    RmaEblk  I746;
} RmaMPHybridDelayPacked;
typedef struct {
    U  I5;
    RmaIbfPcode  I973;
    RmaMpspNewCsdf  I997;
} RmaMPPulseDelay;
typedef struct {
    U  I5;
    RmaMpsp  I997;
    RmaIbfPcode  I973;
} RmaMPPulseOptHybridDelay;
typedef struct _RmaBehavioralTransportDelay {
    U  I5;
    RP  I670;
    RmaTransEventHdr  I873;
    RP  I784;
    RmaIbfPcode  I973;
} RmaBehavioralTransportDelayS;
typedef struct {
    U  I5;
    U  I670;
    RmaTransEventHdr  I873;
    RP  I784;
    RmaIbfPcode  I973;
} RmaNtcTransDelay;
typedef struct {
    U  I5;
    U  I670;
    RmaEblk  I707;
    RmaIbfPcode  I973;
} RmaNtcTransMpwOptDelay;
typedef struct {
    U  I5;
    RmaEblk  I707;
    RmaIbfPcode  I973;
} RmaNtcTransZeroDelay;
typedef struct {
    U  I5;
    U  I998;
    U  I999;
    RmaTransEventHdr  I873;
    RP  I784;
    RmaIbfPcode  I973;
} RmaNtcTransDelayRF;
typedef struct {
    U  I5;
    U  I998;
    U  I999;
    RmaEblk  I707;
    RmaIbfPcode  I973;
} RmaNtcTransMpwOptDelayRF;
typedef struct {
    U  I5;
    RP  I1000;
    RmaTransEventHdr  I873;
    RP  I784;
    RmaIbfPcode  I973;
} RmaICTransDelay;
typedef struct {
    U  I5;
    RP  I1000;
    RmaEblk  I707;
    RmaIbfPcode  I973;
} RmaICTransMpwOptDelay;
typedef struct {
    U  I5;
    RmaEblk  I707;
    RmaIbfPcode  I973;
} RmaICTransZeroDelay;
typedef struct {
    U  I5;
    RP  I787;
    RmaEblk  I707;
    RmaIbfPcode  I973;
} RmaICSimpleDelay;
typedef struct {
    U  I5;
    union {
        RP  psimple;
        RP  I1481;
        RP  I1495;
    } I761;
    RmaIbfPcode  I973;
} RmaICDelay;
typedef struct {
    U  I5;
    RP  I787;
    RmaEblk  I707;
    RmaIbfPcode  I973;
} RmaPortDelay;
typedef struct {
    U  I5;
    RP   I1004[(4)];
} RmaRtlXEdgesHdr;
typedef struct {
    U  I5;
    US  I1005;
    US  I367;
    RP  I1006;
    RP  I1007;
    RP  I1008;
} RmaRtlEdgeBlockHdr;
typedef struct {
    RP  I1009;
    RP  I1010;
} RemoteDbsedLoad;
typedef struct {
    RmaEblk  I707;
    US  I1011;
    US  I367;
    U  I469;
    RP  I1012;
    RP   I791[(4)];
    RP   I793[(4)];
    RemoteDbsedLoad   I1013[1];
} RmaRtlEdgeBlock;
typedef struct TableAssign_ {
    struct TableAssign_ * I859;
    struct TableAssign_ * I778;
    U  I5;
    U  I1015 :1;
    U  I1016 :1;
    U  I1017 :2;
    U  I1018 :1;
    U  I691 :8;
    U  I1019 :1;
    U  I1020 :1;
    U  I1021 :1;
    U  I1022 :1;
    U  I367 :15;
    RP  ptable;
    RP  I989;
} TableAssign;
typedef struct TableAssignLayoutOnClk_ {
    struct TableAssignLayoutOnClk_ * I859;
    struct TableAssignLayoutOnClk_ * I778;
    U  I5;
    U  I1015 :1;
    U  I1016 :1;
    U  I1017 :2;
    U  I1018 :1;
    U  I691 :8;
    U  I1019 :1;
    U  I1020 :1;
    U  I1021 :1;
    U  I1022 :1;
    U  I367 :15;
    RP  ptable;
    RmaSeqPrimOutputOnClkS  I1024;
    RmaEblk  I707;
} TableAssignLayoutOnClk;
typedef struct {
    U  I5;
    RP  I778;
    RP  I1025;
} RmaTableAssignList;
typedef struct {
    U  I5;
    RP  I778;
    RP  I1025;
    RP  I1026;
    RP  I983;
    US  I691;
    UB  I930;
    UB  I1027;
    UB  I1028;
    UB  I752;
    RP   I1029[0];
} RmaThreadTableAssignList;
typedef struct {
    RP  I1026;
    RP  I983;
    US  I691;
    UB  I930;
    UB  I1027;
    UB  I1028;
    UB  I752;
} RmaThreadTableHeader;
typedef struct {
    RP  I1009;
} RmaWakeupListCg;
typedef struct {
    RP  I1009;
} RmaWakeupArrayCg;
typedef struct {
    RP  I1009;
    RP  I1030;
} RmaPreCheckWakeupListCg;
typedef struct {
    RP  I1009;
    RP  I1030;
} RmaPreCheckWakeupArrayCg;
typedef struct {
    U  I1031;
    U  I691;
    RmaTimeStamp   I1032[1];
} RmaTsArray;
typedef struct {
    U  iinput;
    RP  I1033;
} RmaConditionsMdb;
typedef struct {
    RP  I859;
    RP  I1034;
    RP  I702;
    U  I1035;
    scalar  I977;
    scalar  I1036;
    US  I1037 :1;
    US  I1038 :1;
    US  I1039 :1;
    US  I1040 :1;
    US  I1041 :1;
    US  I1042 :1;
    US  I1043 :5;
} RmaTcCoreSimple;
typedef struct {
    RP  I859;
    RP  I1034;
    RP  I702;
    U  I1035;
    scalar  I977;
    scalar  I1036;
    US  I1037 :1;
    US  I1038 :1;
    US  I1039 :1;
    US  I1040 :1;
    US  I1041 :1;
    US  I1042 :1;
    US  I1043 :5;
    RP  I1044;
} RmaTcCoreConditional;
typedef struct {
    RP  I859;
    RP  I1034;
    RP  I702;
    U  I1035;
    scalar  I977;
    scalar  I1036;
    US  I1037 :1;
    US  I1038 :1;
    US  I1039 :1;
    US  I1040 :1;
    US  I1041 :1;
    US  I1042 :1;
    US  I1043 :5;
    RP  I1044;
    RP  I1045;
} RmaTcCoreConditionalOpt;
typedef struct {
    RP  I859;
    RP  I1034;
    RP  I702;
    U  I1035;
    scalar  I977;
    scalar  I1036;
    US  I1037 :1;
    US  I1038 :1;
    US  I1039 :1;
    US  I1040 :1;
    US  I1041 :1;
    US  I1042 :1;
    US  I1043 :5;
    RP  I1045;
    RP  I1046;
    U  I1047;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtc;
typedef struct {
    RP  I1034;
    RP  I702;
    U  I1035;
    scalar  I977;
    scalar  I1036;
    US  I1037 :1;
    US  I1038 :1;
    US  I1039 :1;
    US  I1040 :1;
    US  I1041 :1;
    US  I1042 :1;
    US  I1043 :5;
} RmaTcCoreSimpleNoList;
typedef struct {
    RP  I1034;
    RP  I702;
    U  I1035;
    scalar  I977;
    scalar  I1036;
    US  I1037 :1;
    US  I1038 :1;
    US  I1039 :1;
    US  I1040 :1;
    US  I1041 :1;
    US  I1042 :1;
    US  I1043 :5;
    RP  I981;
} RmaTcCoreSimpleNoListMdb;
typedef struct {
    RP  I1034;
    RP  I702;
    U  I1035;
    scalar  I977;
    scalar  I1036;
    US  I1037 :1;
    US  I1038 :1;
    US  I1039 :1;
    US  I1040 :1;
    US  I1041 :1;
    US  I1042 :1;
    US  I1043 :5;
    RP  I1044;
} RmaTcCoreConditionalNoList;
typedef struct {
    RP  I1034;
    RP  I702;
    U  I1035;
    scalar  I977;
    scalar  I1036;
    US  I1037 :1;
    US  I1038 :1;
    US  I1039 :1;
    US  I1040 :1;
    US  I1041 :1;
    US  I1042 :1;
    US  I1043 :5;
    RP  I1044;
    RP  I1045;
} RmaTcCoreConditionalOptNoList;
typedef struct {
    RP  I1034;
    RP  I702;
    U  I1035;
    scalar  I977;
    scalar  I1036;
    US  I1037 :1;
    US  I1038 :1;
    US  I1039 :1;
    US  I1040 :1;
    US  I1041 :1;
    US  I1042 :1;
    US  I1043 :5;
    RP  I1045;
    RP  I1046;
    U  I1047;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtcNoList;
typedef struct {
    RP  I1034;
    RP  I702;
    U  I1035;
    scalar  I977;
    scalar  I1036;
    US  I1037 :1;
    US  I1038 :1;
    US  I1039 :1;
    US  I1040 :1;
    US  I1041 :1;
    US  I1042 :1;
    US  I1043 :5;
    RP  I1045;
    RP  I1046;
    RP  I981;
    U  I1047;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtcNoListMdb;
typedef struct {
    RP  I1034;
    RP  I702;
    U  I1035;
    scalar  I977;
    scalar  I1036;
    US  I1037 :1;
    US  I1038 :1;
    US  I1039 :1;
    US  I1040 :1;
    US  I1041 :1;
    US  I1042 :1;
    US  I1043 :5;
    RP  I1044;
    RP  I981;
} RmaTcCoreConditionalNoListMdb;
typedef struct {
    RP  I1034;
    RP  I702;
    U  I1035;
    scalar  I977;
    scalar  I1036;
    US  I1037 :1;
    US  I1038 :1;
    US  I1039 :1;
    US  I1040 :1;
    US  I1041 :1;
    US  I1042 :1;
    US  I1043 :5;
    U  I1049;
    RP  I1050;
    RP  I1051;
    RP  I1044;
    RP  I1052;
    RP  I1053;
    RmaTimeStamp  I1054;
} RmaTcCoreNochange;
typedef struct {
    RP  I1055;
    RP  I859;
} RmaTcCoreNochangeList;
typedef struct {
    RP  I1033;
    RmaTimeStamp  I1056;
    scalar  I1057;
} RmaConditionalTSLoadNoList;
typedef struct {
    RP  I859;
    RP  I1033;
    RmaTimeStamp  I1056;
    scalar  I1057;
} RmaConditionalTSLoad;
typedef struct {
    RmaTimeStamp  I1056;
    scalar  I1057;
    US  I977;
    RP  I1045;
} RmaConditionalTSLoadOptNoList;
typedef struct {
    RP  I859;
    RmaTimeStamp  I1056;
    scalar  I1057;
    US  I977;
    RP  I1045;
} RmaConditionalTSLoadOpt;
typedef struct {
    RP  I1045;
    RP  I1058;
    U  I1047;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtcNoList;
typedef struct {
    RP  I981;
    RP  I1045;
    RP  I1058;
    U  I1047;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtcNoListMdb;
typedef struct {
    RP  I859;
    RP  I1045;
    RP  I1058;
    U  I1047;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtc;
typedef struct {
    U  I1059;
    U  I1060;
    FlatNodeNum  I1061;
    U  I867;
    U  I1062;
    U  I1063;
    RmaIbfPcode  I973;
    union {
        scalar  I1064;
        vec32  I1065;
        scalar  * I1066;
        vec32  * I1067;
    } val;
} RmaScanSwitchData;
typedef struct {
    RP  I859;
    RP  I778;
    RP  I1068;
} RmaDoublyLinkedListElem;
typedef struct {
    RP  I1069;
    U  I1070 :1;
    U  I1071 :1;
    U  I1072 :1;
    U  I1073 :4;
    U  I367 :25;
    U  I1074;
} RmaSwitchGateInCbkListInfo;
typedef struct {
    union {
        RmaDoublyLinkedListElem  I1543;
        RmaSwitchGateInCbkListInfo  I2;
    } I684;
    RmaIbfPcode  I973;
} RmaSwitchGate;
typedef struct RmaNonEdgeLoadData1_ {
    US  I1075;
    scalar  val;
    scalar  I1076 :1;
    scalar  I1077 :1;
    scalar  I1078 :1;
    scalar  I1079 :1;
    scalar  I1080 :1;
    RP  I791;
    RP  I1081;
    RP  I1061;
    RP  I1082;
    RP  I1083;
} RmaNonEdgeLoadData1;
typedef struct RmaNonEdgeLoadHdr1_ {
    UB  I1076;
    UB  I1084;
    RmaNonEdgeLoadData1  * I1004;
    RmaNonEdgeLoadData1  * I778;
    void * I1085;
} RmaNonEdgeLoadHdr1;
typedef struct RmaChildClockProp_ {
    RP  I791;
    RP  I1086;
    RP  I1061;
    RP  pcode;
    scalar  val;
} RmaChildClockProp;
typedef struct RmaChildClockPropList1_ {
    RmaChildClockProp  * I1004;
    RmaChildClockProp  * I778;
} RmaChildClockPropList1;
typedef struct {
    U  I5;
    U  I1087;
} RmaHDLCosimDUTGate;
struct clock_load {
    U  I187 :5;
    U  I188 :12;
    U  I189 :1;
    U  I190 :2;
    U  I191 :1;
    U  I192 :1;
    U  I193 :1;
    U  I194 :9;
    U  I195;
    U  I196;
    void (* pfn)(void * I198, char val);
};
typedef struct clock_data {
    U  I203 :1;
    U  I204 :1;
    U  I205 :1;
    U  I206 :1;
    U  I187 :5;
    U  I188 :12;
    U  I207 :6;
    U  I208 :1;
    U  I190 :2;
    U  I191 :1;
    U  I194 :1;
    U  I209;
    U  I210;
    U  I211;
    U  I195;
    U  I212;
    U  I213;
    U  I214;
    U  I215;
    U  I216;
} HdbsClockData;
struct clock_hiconn {
    U  I220;
    U  I221;
    U  I195;
    U  I190;
};
typedef struct _RmaDaiCg {
    RP  I1088;
    RP  I1089;
    U  I1090;
} RmaDaiCg;
typedef union _RmaCbkMemOptUnion {
    RP  I1088;
    RP  I1091;
    RP  I1092;
} RmaCbkMemOptUnion;
typedef struct _RmaDaiOptCg {
    RmaCbkMemOptUnion  I1093;
} RmaDaiOptCg;
struct futq_slot2 {
    U  I738;
    U   I739[32];
};
struct futq_slot1 {
    U  I735;
    struct futq_slot2  I736[32];
};
struct futq_info {
    U  I731;
    U  I732;
    struct futq_slot1  I733[32];
};
struct futq {
    struct futq * I721;
    struct futq * I723;
    RmaEblk  * I724;
    RmaEblk  * I725;
    U  I712;
    U  I1;
};
struct sched_table {
    struct futq * I726;
    struct futq I727;
    struct hash_bucket * I728;
    struct hash_bucket * I730;
};
struct dummyq_struct {
    clock_struct  I1097;
    EBLK  * I1098;
    EBLK  * I1099;
    EBLK  * I1100;
    struct futq * I1101;
    struct futq * I1102;
    struct futq * I1103;
    struct sched_table * I1104;
    struct futq_info * I1106;
    U  I1108;
    U  I1109;
    U  I1110;
    struct millenium * I1111;
    EBLK  * I1113;
    EBLK  * I1114;
    EBLK  * I1115;
    EBLK  * I1116;
    EBLK  * I1117;
    EBLK  * I1118;
    EBLK  * I1119;
    EBLK  * I1120;
    EBLK  * I1121;
    EBLK  * I1122;
    EBLK  * I1123;
    EBLK  * I1124;
    EBLK  * I1125;
    EBLK  * I1126;
    EBLK  * I1127;
    EBLK  * I1128;
    EBLK  * I1129;
    EBLK  * I1130;
    MPS  * I1131;
    struct retain_t * I1132;
    EBLK  * I1133;
    EBLK  * I1134;
    EBLK  * I1135;
    EBLK  * I1136;
    EBLK  * I1137;
    EBLK  * I1138;
    EBLK  * I1139;
    EBLK  * I1140;
    EBLK  * I1141;
    EBLK  * I1142;
    EBLK  * I1143;
    EBLK  * I1144;
    EBLK  * I1145;
    EBLK  * I1146;
    EBLK  * I1147;
    EBLK  * I1148;
    EBLK  * I1149;
    EBLK  * I1150;
    EBLK  * I1151;
    EBLK  * I1152;
    EBLK  * I1153;
    EBLK  * I1154;
    EBLK  * I1155;
    EBLK  * I1156;
    EBLK  * I1157;
    EBLK  * I1158;
    EBLK  I1159;
    EBLK  * I1160;
    EBLK  * I1161;
    EBLK  * I1162;
    EBLK  * I1163;
    int I1164;
    int I1165;
    struct vcs_globals_t * I1166;
    clock_struct  I1167;
    unsigned long long I1168;
    EBLK  * I1169;
    EBLK  * I1170;
    void * I1171;
};
typedef void (* FP)(void *  , scalar   );
typedef void (* FP1)(void *  );
typedef void (* FPRAP)(void *  , vec32  *  , U   );
typedef U  (* FPU1)(void *  );
typedef void (* FPV)(void *  , UB  *  );
typedef void (* FPVU)(void *  , UB  *  , U   );
typedef void (* FPLSEL)(void *  , scalar   , U   );
typedef void (* FPLSELV)(void *  , vec32  *  , U   , U   );
typedef void (* FPFPV)(UB  *  , UB  *  , U   , U   , U   , U   , U   , UB  *  , U   );
typedef void (* FPFA)(UB  *  , UB  *  , U   , U   , U   , U   , U   , U   , UB  *  , U   );
typedef void (* FPRPV)(UB  *  , U   , U   , U   );
typedef void (* FPEVCDLSEL)(void *  , scalar   , U   , UB  *  );
typedef void (* FPEVCDLSELV)(void *  , vec32  *  , U   , U   , UB  *  );
typedef void (* FPNTYPE_L)(void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_H)(void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_LPAP)(void *  , void *  , void *  , U   , U   , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_HPAP)(void *  , void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef struct _lqueue {
    EBLK  * I708;
    EBLK  * I1172;
    int I1173;
    struct _lqueue * I749;
} Queue;
typedef struct {
    void * I1175;
    void * I1176;
    void * I1177[2];
    void * I1178;
} ClkLevel;
typedef struct {
    unsigned long long I1179;
    EBLK  I1180;
    U  I1181;
    U  I1182;
    union {
        void * pHeap;
        Queue  * pList;
    } I684;
    unsigned long long I1183;
    ClkLevel  I1184;
    Queue   I1185[1];
} Qhdr;
extern UB   Xvalchg[];
extern UB   X4val[];
extern UB   X3val[];
extern UB   X2val[];
extern UB   XcvtstrTR[];
extern UB   Xcvtstr[];
extern UB   Xbuf[];
extern UB   Xbitnot[];
extern UB   Xwor[];
extern UB   Xwand[];
extern U   Xbitnot4val[];
extern UB   globalTable1Input[];
extern __thread unsigned long long vcs_clocks;
extern UB   Xunion[];
extern U  fRTFrcRelCbk;
extern FP  txpFnPtr;
extern FP   rmaFunctionArray[];
extern UP   rmaFunctionRtlArray[];
extern FP   rmaFunctionLRArray[];
extern U  rmaFunctionCount;
extern U  rmaFunctionLRCount;
extern U  rmaFunctionLRDummyCount;
extern UP  rmaFunctionDummyEndPtr;
extern __thread UB  dummyScalar;
extern __thread UB  fScalarIsForced;
extern __thread UB  fScalarIsReleased;
extern U  fNotimingchecks;
extern RP  * iparr;
extern FP1  * rmaPostAnySchedFnPtr;
extern FP1  * rmaPostAnySchedFnSamplePtr;
extern FP1  * rmaPostAnySchedVFnPtr;
extern FP1  * rmaPostAnySchedWFnPtr;
extern FP1  * rmaPostAnySchedEFnPtr;
extern FP1  * rmaPostSchedUpdateClockStatusFnPtr;
extern FP1  * rmaPostSchedUpdateClockStatusNonCongruentFnPtr;
extern FP1  * rmaPostSchedUpdateEvTrigFnPtr;
extern FP1  * rmaSched0UpdateEvTrigFnPtr;
extern FP1  * rmaPostSchedRecoveryResetDbsFnPtr;
extern U  fGblDataOrTime0Prop;
extern UB   rmaEdgeStatusValArr[];
extern FP1  * propForceCbkSPostSchedCgFnPtr;
extern FP1  * propForceCbkMemoptSPostSchedCgFnPtr;
extern UB  * ptableGbl;
extern UB  * expandedClkValues;
extern __thread Qhdr  * lvlQueue;
extern __thread unsigned threadIndex;
extern int cPeblkThreads;
extern US   xedges[];
extern U  mhdl_delta_count;
extern U  ignoreSchedForScanOpt;
extern U  fignoreSchedForDeadComboCloud;
extern int fZeroUser;
extern U  fEveBusPullVal;
extern U  fEveBusPullFlag;
extern U  fFutEventPRL;
extern U  fParallelEBLK;
extern U  fBufferingEvent;
extern __thread UB  fNettypeIsForced;
extern __thread UB  fNettypeIsReleased;
extern EBLK  * peblkFutQ1Head;
extern EBLK  * peblkFutQ1Tail;
extern US  * edgeActionT;
extern unsigned long long * derivedClk;
extern U  fHashTableSize;
extern U  fSkipStrChangeOnDelay;
extern scalar   edgeChangeLookUp[4][4];
extern U  fDoingTime0Prop;
extern U  fLoopDetectMode;
extern int gFLoopDectCodeEna;
extern U  fLoopReportRT;


extern void *mempcpy(void* s1, void* s2, unsigned n);
extern UB* rmaEvalDelays(UB* pcode, scalar val);
extern UB* rmaEvalDelaysV(UB* pcode, vec32* pval);
extern void rmaPopTransEvent(UB* pcode);
extern void rmaSetupFuncArray(UP* ra, U c, U w);
extern void rmaSetupRTLoopReportPtrs(UP* funcs, UP* rtlFuncs, U cnt, U cntDummy, UP end);
extern void SinitHsimPats(void);
extern void VVrpDaicb(void* ip, U nIndex);
extern int SDaicb(void *ip, U nIndex);
extern void SDaicbForHsimNoFlagScalar(void* pDaiCb, unsigned char value);
extern void SDaicbForHsimNoFlagStrengthScalar(void* pDaiCb, unsigned char value);
extern void SDaicbForHsimNoFlag(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimNoFlag2(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimWithFlag(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimNoFlagFrcRel(void* pRmaDaiCg, unsigned char reason, int msb, int lsb, int ndx);
extern void SDaicbForHsimNoFlagFrcRel2(void* pRmaDaiCg, unsigned char reason, int msb, int lsb, int ndx);
extern void VcsHsimValueChangeCB(void* pRmaDaiCg, void* pValue, unsigned int valueFormat);
extern U isNonDesignNodeCallbackList(void* pRmaDaiCg);
extern void SDaicbForHsimCbkMemOptNoFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptNoFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void VVrpNonEventNonRegdScalarForHsimOptCbkMemopt(void* ip, U nIndex);
extern void SDaicbForHsimCbkMemOptNoFlagDynElabScalar(U* mem, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagDynElabScalar(U* mem, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptNoFlagDynElabFrcRel(U* mem, unsigned char reason, int msb, int lsb, int ndx);
extern void SDaicbForHsimCbkMemOptNoFlagFrcRel(void* pDaiCb, unsigned char reason, int msb, int lsb, int ndx);
extern void hsimDispatchCbkMemOptForVcd(RP p, U val);
extern void* hsimGetCbkMemOptCallback(RP p);
extern void hsimDispatchCbkMemOptNoDynElabS(RP* p, U val, U isStrength);
extern void* hsimGetCbkPtrNoDynElab(RP p);
extern void hsimDispatchCbkMemOptDynElabS(U** pvcdarr, U** pcbkarr, U val, U isScalForced, U isScalReleased, U isStrength);
extern void hsimDispatchCbkMemOptNoDynElabVector(RP* /*RmaDaiOptCg* */p, void* pval, U /*RmaValueType*/ vt, U cbits);
extern void copyAndPropRootCbkCgS(RmaRootCbkCg* pRootCbk, scalar val);
extern void copyAndPropRootCbkCgV(RmaRootCbkCg* rootCbk, vec32* pval);
extern void copyAndPropRootCbkCgW(RmaRootCbkCg* rootCbk, vec32* pval);
extern void copyAndPropRootCbkCgE(RmaRootCbkCg* rootCbk, scalar* pval);
extern void dumpRootVcdCg(RmaRootVcdCg* pRootVcd, scalar val);
extern void Wsvvar_callback_non_dynamic1(RP* ptr, int);
extern void rmaExecEvSyncList(RP plist);
extern void Wsvvar_callback_virt_intf(RP* ptr);
extern void Wsvvar_callback_hsim_var(RP* ptr);
extern void checkAndConvertVec32To2State(vec32* value, vec32* svalue, U cbits, U* pforcedBits);
extern unsigned int fGblDataOrTime0Prop;
extern void SchedSemiLerMP1(UB* pmps, U partId);
extern void SchedSemiLerMPO(UB* pmpso, U partId);
extern void rmaDummyPropagate(void);
extern RP rmaTestCg(RP pcode, U vt, UB* value);
extern void hsUpdateModpathTimeStamp(UB* pmps);
extern void doMpd32One(UB* pmps);
extern void doMpdCommon(MPS* pmps);
extern TimeStamp GET_DIFF_DELAY_FUNC(TimeStamp ts);
extern void SchedSemiLerMP(UB* ppulse, U partId);
extern EBLK *peblkFutQ1Head;
extern EBLK *peblkFutQ1Tail;
extern void scheduleuna(UB *e, U t);
extern void scheduleuna_mp(EBLK *e, unsigned t);
extern void schedule(UB *e, U t);
extern void sched_hsopt(struct dummyq_struct * pQ, EBLK *e, U t);
extern void sched_millenium(struct dummyq_struct * pQ, void *e, U thigh, U t);
extern void schedule_1(EBLK *e);
extern void sched0(UB *e);
extern void sched0Raptor(UB *e);
extern void sched0lq(EBLK *e);
extern void sched0lqnc(EBLK *e);
extern void sched0una(UB *e);
extern void sched0una_th(struct dummyq_struct *pq, UB *e);
extern void hsopt_sched0u_th(struct dummyq_struct *pq, UB *e);
extern void scheduleuna_mp_th(struct dummyq_struct *pq, EBLK *e, unsigned t);
extern void schedal(UB *e);
extern void sched0_th(struct dummyq_struct * pQ, EBLK *e);
extern void sched0u(UB *e);
extern void sched0u_th(struct dummyq_struct *pq, UB *e);
extern void sched0_hsim_front_th(struct dummyq_struct * pQ, UB *e);
extern void sched0_hsim_frontlq_th(struct dummyq_struct * pQ, UB *e);
extern void sched0lq_th(struct dummyq_struct * pQ, UB *e);
extern void schedal_th(struct dummyq_struct * pQ, UB *e);
extern void scheduleuna_th(struct dummyq_struct * pQ, void *e, U t);
extern void schedule_th(struct dummyq_struct * pQ, UB *e, U t);
extern void schedule_1_th(struct dummyq_struct * pQ, EBLK *peblk);
extern void SetupLER_th(struct dummyq_struct * pQ, EBLK *e);
extern void FsdbReportClkGlitch(UB*,U);
extern void SchedSemiLer_th(struct dummyq_struct * pQ, EBLK *e);
extern void SchedSemiLerTXP_th(struct dummyq_struct * pQ, EBLK *e);
extern void SchedSemiLerTXPFreeVar_th(struct dummyq_struct * pQ, EBLK *e);
extern U getVcdFlags(UB *ip);
extern void VVrpNonEventNonRegdScalarForHsimOpt(void* ip, U nIndex);
extern void VVrpNonEventNonRegdScalarForHsimOpt2(void* ip, U nIndex);
extern void SchedSemiLerTBReactiveRegion(struct eblk* peblk);
extern void SchedSemiLerTBReactiveRegion_th(struct eblk* peblk, U partId);
extern void SchedSemiLerTr(UB* peblk, U partId);
extern void SchedSemiLerNBA(UB* peblk, U partId);
extern void NBA_Semiler(void *ip, void *pNBS);
extern void sched0sd_hsim(UB* peblk);
extern void sched0sd_hsim_PRL(UB* peblk);
extern void sched0lq_parallel_clk(EBLK* peblk);
extern void doFgpRaceCheck(UB* pcode, UB* p, U flag);
extern void doSanityLvlCheck();
extern void sched0lq_parallel_ova(EBLK* peblk);
extern void sched0lq_parallel_ova_precheck(EBLK* peblk);
extern void rmaDlpEvalSeqPrim(UB* peblk, UB val, UB preval);
extern void appendNtcEvent(UB* phdr, scalar s, U schedDelta);
extern void appendTransEventS(RmaTransEventHdr* phdr, scalar s, U schedDelta);
extern void schedRetainHsim(MPS* pMPS, scalar sv, scalar pv);
extern void updateRetainHsim(MPS* pMPS,scalar sv, scalar pv);
extern void hsimRegisterEdge(void* sm,  scalar s);
extern U pvcsGetPartId();
extern void HsimPVCSPartIdCheck(U instNo);
extern void debug_func(U partId, struct dummyq_struct* pQ, EBLK* EblkLastEventx); 
extern struct dummyq_struct* pvcsGetQ(U thid);
extern EBLK* pvcsGetLastEventEblk(U thid);
extern void insertTransEvent(RmaTransEventHdr* phdr, scalar s, scalar pv, scalar resval, U schedDelta, int re, UB* predd, U fpdd);
extern void insertNtcEventRF(RmaTransEventHdr* phdr, scalar s, scalar pv, scalar resval, U schedDelta, U* delays);
extern U doTimingViolation(RmaTimeStamp ts,RP* pdata, U fskew, U limit, U floaded, U fcondopt, RmaTimeStamp tsNochange);
extern void sched_gate_hsim(EBLK* peblk, unsigned t, RP* offset, U gd_info, U encodeInPcode, void* propValue);
extern int getCurSchedRegion();
extern FP getRoutPtr(RP, U);
extern U rmaChangeCheckAndUpdateE(scalar* pvalDst, scalar* pvalSrc, U cbits);
extern void rmaUpdateE(scalar* pvalDst, scalar* pvalSrc, U cbits);
extern U rmaChangeCheckAndUpdateEFromW(scalar* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaLhsPartSelUpdateE(scalar* pvalDst, scalar* pvalSrc, U index, U width);
extern void rmaUpdateWithForceSelectorE(scalar* pvalDst, scalar* pvalSrc, U cbits, U* pforceSelector);
extern void rmaUpdateWFromE(vec32* pvalDst, scalar* pvalSrc, U cbits);
extern U rmaLhsPartSelWithChangeCheckE(scalar* pvalDst, scalar* pvalSrc, U index, U width);
extern void rmaLhsPartSelWFromE(vec32* pvalDst, scalar* pvalSrc, U index,U width);
extern U rmaChangeCheckAndUpdateW(vec32* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaUpdateW(vec32* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaUpdateEFromW(scalar* pvalDst, vec32* pvalSrc, U cbits);
extern U rmaLhsPartSelWithChangeCheckW(vec32* pvalDst, vec32* pvalSrc, U index,U width);
extern void rmaLhsPartSelEFromW(scalar* pvalDst, vec32* pvalSrc, U index,U width);
extern U rmaLhsPartSelWithChangeCheckEFromW(scalar* pvalDst, vec32* pvalSrc, U index,U width);
extern void rmaLhsPartSelUpdateW(vec32* pvalDst, vec32* pvalSrc, U index, U width);
extern void rmaEvalWunionW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalWorW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalWandW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalUnionE(scalar* dst, scalar* src, U cbits, U count, RP ptable);
typedef U RmaCgFunctionType;
extern RmaIbfPcode* rmaEvalPartSelectsW(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsWLe32(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsWToE(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsEToE(scalar* pv, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce, UB* pevcdStatus);
extern RmaIbfPcode* rmaEvalPartSelectsEToW(scalar* pv, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern U rmaEvalBitPosEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitNegEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitChangeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U VcsForceVecVCg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U/*RmaValueConvType*/ convtype, U/*RmaForceType*/ frcType, UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecVCg(UB* pcode, UB* pvDst, U fullcbits, U ibeginDst, U width, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecWCg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U/*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType, UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecWCg(UB* pcode, UB* pvDst, U fullcbits, U ibeginDst, U width, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecECg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U /*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType,UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecACg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U /*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType,UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecCg(UB* pcode, UB* pvDst, U ibeginDst, U width, U /*RmaValueType*/ type,U fisRoot, UB* prhsDst, U frhs, U* pforcedbits);
extern U VcsDriveBitsAndDoChangeCheckV(vec32* pvSel, vec32* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern U VcsDriveBitsAndDoChangeCheckW(vec32* pvSel, vec32* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern U VcsDriveBitsAndDoChangeCheckE(scalar* pvSel, scalar* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern void cgvecDebug_Eblk(UB* pcode);
extern U rmaCmpW(vec32* pvalDst, vec32* pvalSrc, U index, U width);
extern void copyVec32ArrMask(vec32* pv1, vec32* pv2, U len, U* mask);
extern void* memcpy(void*, const void*, size_t);
extern int memcmp(const void*, const void*, size_t);
extern void propagateScanOptPathVal(EBLK *peblk);
extern UB* rmaProcessScanSwitches(UB* pcode, scalar val);
extern UB* rmaProcessScanSwitchesV(UB* pcode, vec32 *pval);
extern UB* rmaProcessScanoptDump(UB* pcode, scalar val);
extern UB* rmaProcessScanoptDumpV(UB* pcode, vec32 *pval);
extern UB* rmaProcessScanChainOptSeqPrims(UB* pcode, scalar val);
extern void rmaProcessPvcsCcn(UB* pcode, scalar val);
extern void rmaProcessPvcsCcnE(UB* pcode, scalar* val);
extern void rmaProcessPvcsCcnW(UB* pcode, vec32* val);
extern void rmaProcessPvcsCcnV(UB* pcode, vec32* val);
extern void rmaProcessPvcsCcnCompiledS(UB* pcode, U offset, scalar ibnval);
extern void rmaProcessPvcsCcnCompiledV(UB* pcode, U offset, vec32* pval);
extern void schedResetRecoveryDbs(U cedges, EBLK* peblkFirst);
extern UB* rmaEvalUnaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpVOneFanoutCount(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpVLargeFanoutCount(UB* pcode, vec32* pval);
extern UB* rmaEvalAndOpVOneFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalAndOpVLargeFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalAndOpV(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpVOneFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpVLargeFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpV(UB* pcode, vec32* value);
extern UB* rmaEvalTernaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalUnaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalTernaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalUnaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalBinaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalTernaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalTernaryOpS(UB* pcode, scalar val);
extern scalar rmaGetScalarFromWCg(vec32* pval, U index);
extern void rmaSetScalarInWCg(vec32* pval, U index, scalar s);
extern void rmaCountRaptorBits(void* pval, void* pvalPrev, U cbits, U vt);
extern void setHsimFunc(void* ip);
extern void unsetHsimFunc(void* ip);
extern UB* getEvcdStatusByFlagsE(scalar* pscalar, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsV(vec32* pvec32, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsS(scalar* pscalar, UB* pevcdTBDriverFlags, U cdrivers, UB* table);
extern UB* getSingleDrvEvcdStatusS(UB value, U fTBDriver);
extern UB* getSingleDrvEvcdStatusE(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getSingleDrvEvcdStatusV(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getEvcdStatusByDrvEvcdStatus(UB* pdrvevcdStatus, U cdrivers, UB* table, U cbits);
extern void evcdCallback(UP pcode, U cbits);
extern UB* getSavedEvcdStatus(void);
extern void saveEvcdStatus(UB*);
extern void mhdlMarkExport(void*, U);
extern void levelInsertQueue(int);
extern void VcsRciRtl(RP pcode);
extern U fLoopDetectMode;
extern int gFLoopDectCodeEna;
extern U fLoopReportRT;
extern void rtSched0LoopDectDumpProcess(void* e, void* rtn, void* PQ);
extern void pushHsimRtnCtxt(void* pcode);
extern void popHsimRtnCtxt();
extern EBLK* loopReportInlinedSched0Wrapper(EBLK *peblk);
extern void loopReportSched0Wrapper(EBLK *peblk, unsigned int sfType, unsigned int fTH, struct dummyq_struct* pq);
extern void loopReportSchedSemiLerWrapper(EBLK *peblk, int sfType);
extern void CallGraphPushNodeAndAddToGraph(UP flatNode, UP instNum, U dummy);
extern void CallGraphPopNode(void);
extern RP elabGetIpTpl(U in);
extern U rmaEvalBitBothEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ1W(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQXW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ0W(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval01EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval0XEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval10EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval1XEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalX1EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalX0EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitPosEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitNegEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitBothEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ1E(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ0E(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitChangeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern void rmaScheduleNbaGate(RP pcode, scalar val);
extern void rmaEvalRtlEdgeLoads(RmaRtlEdgeBlockHdr *phdr, US clkEdge, scalar clkVal, scalar prevClkVal, scalar val4,   scalar prevval4);
extern void rmaEvaluateDynamicGateLoadsCg(RP p, scalar s);
extern void rmaEvaluateFusedWithDynamicGateLoadsCg(RP p, scalar s);
extern void rmaScheduleGatedClockEdgeLoad(UB* p, US* ea, U fNonEdgeLoad, UB* plist, UB* pprevlist, scalar v);
extern void rmaRemoveNonEdgeLoads(UB* pcode);
extern void rmaRecordEvents(HsimNodeRecord *pnr);
extern void handlePCBs(UB* p, U i);
extern void markMasterClkOvaLists(U fdbs, RP p);
extern void rmaChildClockPropAfterWrite(UB* p);
extern void rmaSchedChildClockPropAfterWrite(UB* p, UB* pmasterList, UB val);
extern void HDLCosimProcessDUTInputChange(U inputId, void* val);
extern void rmaChangeListForMovedGates(UB clkVal, UB f10Edge, UB* subMasterVal, UB* plist, RP* p, U count);
extern void rmaEvalSeqPrimLoadsByteArray(UB* pcode, UB val, UB prevval4);
extern void rmaEvalSeqPrimLoadsByteArrayX(UB* pcode, UB val, UB prevval4);
extern void vcsRmaEvalSeqPrimLoadsByteArraySCT(UB* pcode, UB val, UB prevval4, U c);
extern void vcsAbortForBadEBlk(void);
extern scalar edgeChangeLookUp[4][4];
extern void Wsvvar_sched_virt_intf_eval(RP* ptr);
extern U rmaIsS2State(scalar s);
extern U rmaIsV2State(vec32* pval, U cbits);
extern U rmaIsW2State(vec32* pval, U cbits);
extern U rmaIsE2State(scalar* pval, U cbits);
extern void rmaUpdateRecordFor2State(HsimNodeRecord* record, U f2state);
typedef void (*FuncPtr)();
static inline U asm_bsf (U in)
{
#if defined(linux)
    U out;
    asm ("movl %1, %%eax; bsf %%eax, %%eax; movl %%eax, %0;"
        :"=r"(out)
        :"r"(in)
        :"%eax"
        );
    return out;
#else
    return 0;
#endif
}


#ifdef __cplusplus
extern "C" {
#endif
void  hs_0_M_1_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_1_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_1_2__simv_daidir (UB  * pcode);
void  hs_0_M_1_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_2_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_2_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_2_2__simv_daidir (UB  * pcode);
void  hs_0_M_2_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_4_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_4_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_4_2__simv_daidir (UB  * pcode);
void  hs_0_M_4_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_5_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_5_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_5_2__simv_daidir (UB  * pcode);
void  hs_0_M_5_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_24_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_24_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_24_2__simv_daidir (UB  * pcode);
void  hs_0_M_24_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_25_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_25_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_25_2__simv_daidir (UB  * pcode);
void  hs_0_M_25_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_26_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_26_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_26_2__simv_daidir (UB  * pcode);
void  hs_0_M_26_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_27_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_27_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_27_2__simv_daidir (UB  * pcode);
void  hs_0_M_27_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_28_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_28_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_28_2__simv_daidir (UB  * pcode);
void  hs_0_M_28_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_29_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_29_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_29_2__simv_daidir (UB  * pcode);
void  hs_0_M_29_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_30_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_30_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_30_2__simv_daidir (UB  * pcode);
void  hs_0_M_30_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_31_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_31_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_31_2__simv_daidir (UB  * pcode);
void  hs_0_M_31_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_32_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_32_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_32_2__simv_daidir (UB  * pcode);
void  hs_0_M_32_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_32_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_33_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_34_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_35_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_35_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_35_2__simv_daidir (UB  * pcode);
void  hs_0_M_35_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_36_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_36_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_36_2__simv_daidir (UB  * pcode);
void  hs_0_M_36_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_37_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_37_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_37_2__simv_daidir (UB  * pcode);
void  hs_0_M_37_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_38_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_38_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_38_2__simv_daidir (UB  * pcode);
void  hs_0_M_38_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_39_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_39_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_39_2__simv_daidir (UB  * pcode);
void  hs_0_M_39_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_40_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_40_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_40_2__simv_daidir (UB  * pcode);
void  hs_0_M_40_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_41_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_41_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_41_2__simv_daidir (UB  * pcode);
void  hs_0_M_41_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_42_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_42_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_42_2__simv_daidir (UB  * pcode);
void  hs_0_M_42_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_44_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_44_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_46_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_46_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_46_2__simv_daidir (UB  * pcode);
void  hs_0_M_46_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_47_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_47_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_47_2__simv_daidir (UB  * pcode);
void  hs_0_M_47_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_55_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_55_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_57_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_57_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_57_2__simv_daidir (UB  * pcode);
void  hs_0_M_57_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_58_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_58_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_58_2__simv_daidir (UB  * pcode);
void  hs_0_M_58_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_60_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_60_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_60_2__simv_daidir (UB  * pcode);
void  hs_0_M_60_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_61_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_61_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_61_2__simv_daidir (UB  * pcode);
void  hs_0_M_61_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_62_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_62_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_62_2__simv_daidir (UB  * pcode);
void  hs_0_M_62_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_63_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_64_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_65_0__simv_daidir (UB  * pcode, vec32  * I950, U  I867);
void  hs_0_M_66_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_67_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_67_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_67_2__simv_daidir (UB  * pcode);
void  hs_0_M_67_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_67_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_68_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_68_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_68_2__simv_daidir (UB  * pcode);
void  hs_0_M_68_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_68_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_69_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_69_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_69_2__simv_daidir (UB  * pcode);
void  hs_0_M_69_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_70_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_70_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_70_2__simv_daidir (UB  * pcode);
void  hs_0_M_70_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_71_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_72_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_74_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_74_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_74_2__simv_daidir (UB  * pcode);
void  hs_0_M_74_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_74_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_75_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_75_1__simv_daidir (UB  * pcode, scalar  val, U  I662, scalar  * I1213, U  did);
void  hs_0_M_75_2__simv_daidir (UB  * pcode);
void  hs_0_M_75_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_75_11__simv_daidir (UB  * pcode, scalar  val);
void  hsG_0__0 (struct dummyq_struct * I1199, EBLK  * I1193, U  I670);
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
  }
#endif
#endif /*__DO_RMAHDR_*/

